const mongoose = require('mongoose');
const slugify = require('slugify');

const ProductSchema = new mongoose.Schema({
  name: { type: String, required: true },
  slug: { type: String, unique: true },
  description: { type: String, required: true },
  brand: { type: String, required: true },
  category: { type: mongoose.Schema.Types.ObjectId, ref: 'Category', required: false, index: true },
  price: { type: Number, required: true },
  originalPrice: { type: Number },
  discountPercentage: { type: Number, default: 0 },
  images: [{ type: String }],
  countInStock: { type: Number, required: true, default: 0 },
  rating: { type: Number, default: 0, min: 0, max: 5 },
  numReviews: { type: Number, default: 0 },
  isFeatured: { type: Boolean, default: false, index: true },
  isNewArrival: { type: Boolean, default: false },

  gender: { type: String, enum: ['men', 'women', 'unisex'] },

  variants: [{
    color: { type: String },
    colorCode: { type: String },
    images: [{ type: String }],
    sizes: [{
      size: { type: Number },
      countInStock: { type: Number, default: 0 },
      price: { type: Number }
    }]
  }],

  specifications: { type: Map, of: String },

  metaTitle: { type: String },
  metaDescription: { type: String },
  metaKeywords: [{ type: String }],

  sku: {
    type: String,
    unique: true,
    default: function() {
      return 'SKU-' + Date.now().toString(36).toUpperCase() + '-' + Math.random().toString(36).substring(2, 6).toUpperCase();
    }
  },

  weight: { type: Number },
  dimensions: {
    length: { type: Number },
    width: { type: Number },
    height: { type: Number }
  },

  isActive: { type: Boolean, default: true, index: true },
}, { timestamps: true, toJSON: { virtuals: true }, toObject: { virtuals: true } });

// Generate slug before saving
ProductSchema.pre('save', async function(next) {
  if (this.isModified('name')) {
    this.slug = slugify(this.name, { lower: true, strict: true });
  }

  // Check SKU uniqueness manually if SKU was autogenerated
  if (this.isNew) {
    let skuExists = await mongoose.models.Product.findOne({ sku: this.sku });
    while (skuExists) {
      this.sku = 'SKU-' + Date.now().toString(36).toUpperCase() + '-' + Math.random().toString(36).substring(2, 6).toUpperCase();
      skuExists = await mongoose.models.Product.findOne({ sku: this.sku });
    }
  }

  next();
});

// Virtual field for discount price
ProductSchema.virtual('discountPrice').get(function() {
  if (this.discountPercentage > 0) {
    return this.price - (this.price * this.discountPercentage / 100);
  }
  return this.price;
});

// Virtual field to calculate total count in stock from variants
ProductSchema.virtual('calculatedCountInStock').get(function() {
  return this.variants.reduce((total, variant) => {
    const sizeStock = variant.sizes?.reduce((sum, size) => sum + (size.countInStock || 0), 0) || 0;
    return total + sizeStock;
  }, 0);
});

// Virtual field to populate reviews (use .populate('reviews') in queries)
ProductSchema.virtual('reviews', {
  ref: 'Review',
  localField: '_id',
  foreignField: 'product'
});

module.exports = mongoose.model('Product', ProductSchema);
